<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="trust200902" docName="draft-wullink-restful-epp-01" submissionType="IETF" category="std" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" indexInclude="true" tocDepth="4">

<front>
<title abbrev="RESTful Transport for EPP">Extensible Provisioning Protocol (EPP) RESTful Transport</title><seriesInfo value="draft-wullink-restful-epp-01" stream="IETF" status="standard" name="Internet-Draft"></seriesInfo>
<author initials="M." surname="Wullink" fullname="Maarten Wullink"><organization>SIDN Labs</organization><address><postal><street></street>
</postal><email>maarten.wullink@sidn.nl</email>
<uri>https://sidn.nl/</uri>
</address></author><author initials="M." surname="Davids" fullname="Marco Davids"><organization>SIDN Labs</organization><address><postal><street></street>
</postal><email>marco.davids@sidn.nl</email>
<uri>https://sidn.nl/</uri>
</address></author><date/>
<area>Internet</area>
<workgroup>Network Working Group</workgroup>

<abstract>
<t>This document describes RESTful EPP (REPP), a REST based Application Programming Interface (API)
for the Extensible Provisioning Protocol <xref target="RFC5730"></xref>.
REPP enables the development a stateless and scaleable EPP service.</t>
<t>This document includes a mapping of <xref target="RFC5730"></xref> XML EPP commands to a RESTful HTTP based
interface. Existing semantics and mappings as defined in <xref target="RFC5731"></xref>,
<xref target="RFC5732"></xref> and <xref target="RFC5733"></xref> are largely retained and reusable in RESTful EPP.</t>
<t>REPP uses agent-driven content negotiation for supporting multiple presentations, such as XML and JSON.</t>
<t>A server implementing REPP does not maintain client or process state, allowing for scalable EPP services
by enabling load balancing at the request level instead of the session level as described in <xref target="RFC5734"></xref>.</t>
</abstract>

</front>

<middle>

<section anchor="introduction"><name>Introduction</name>
<t>This document describes a transport protocol for EPP, based on the <xref target="REST"></xref> architectural style.
This transport machanism leverages the HTTP protocol <xref target="RFC2616"></xref> and the principles of <xref target="REST"></xref>.
Conforming to the REST constraints is generally referred to as being &quot;RESTful&quot;.
Hence we dubbed the new transport protocol: &quot;'RESTful transport for EPP&quot; or &quot;REPP&quot;
for short.</t>
<t>This new REST based transport includes a mapping of
<xref target="RFC5730"></xref> EPP commands to resources based on Uniform Resource Locators <xref target="RFC1738"></xref>.
REPP, in contrast to the EPP specification, is stateless. It aims to provide a
mechanism that is more suitable for complex, high availability environments,
as well as for environments where TCP connections can be unreliable.</t>
<t>RFC 5730 <xref target="RFC5730"></xref> Section 2.1 describes that EPP can be layered over
multiple transport protocols.  Currently, the EPP transport over TCP
<xref target="RFC5734"></xref> is the only widely deployed transport mapping for EPP.
This same section defines that newly defined transport mappings must
preserve the stateful nature of EPP.</t>
<t>The stateless nature of REPP requires that no session state is maintained on the EPP server.
Each client request to the server contains all the information necessary
for the server to process the request.</t>
<t>A good understanding of the EPP base protocol specification <xref target="RFC5730"></xref>
is advised, to grasp the command mapping described in this
document.</t>
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
&quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this
document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>
</section>

<section anchor="terminology"><name>Terminology</name>
<t>In this document the following terminology is used.</t>
<t>REST - Representational State Transfer (<xref target="REST"></xref>). An architectural
style.</t>
<t>RESTful - A RESTful web service is a web service or API implemented using
HTTP and the principles of <xref target="REST"></xref>.</t>
<t>EPP RFCs - This is a reference to the EPP version 1.0
specifications <xref target="RFC5730"></xref>, <xref target="RFC5731"></xref>, <xref target="RFC5732"></xref> and <xref target="RFC5733"></xref>.</t>
<t>Stateful EPP - The definition according to <xref target="RFC5730" sectionFormat="of" section="2"></xref>.</t>
<t>RESTful EPP or REPP - The RESTful transport for EPP described in
this document.</t>
<t>URL - A Uniform Resource Locator as defined in <xref target="RFC3986"></xref>.</t>
<t>Resource - A network data object or service that can be identified
by a URL.</t>
<t>Command Mapping - A mapping of <xref target="RFC5730"></xref> EPP commands to
RESTful EPP URL resources.</t>
<t>REPP client - An HTTP user agent performing an REPP request</t>
<t>REPP server - An HTTP server resposible for processing requests and returning
results in any supported media type.</t>
</section>

<section anchor="conventions-used-in-this-document"><name>Conventions Used in This Document</name>
<t>XML is case sensitive. Unless stated otherwise, XML specifications
and examples provided in this document MUST be interpreted in the
character case presented to develop a conforming implementation.</t>
<t>The examples in this document assume that request and response messages
are properly formatted XML documents.</t>
<t>In examples, lines starting with &quot;C:&quot; represent data sent by a
REPP client and lines starting with &quot;S:&quot; represent data returned
by a REPP server. Indentation and white space in examples
are provided only to illustrate element relationships and are not
REQUIRED features of the protocol.</t>
</section>

<section anchor="design-considerations"><name>Design Considerations</name>
<t>RESTful transport for EPP (REPP) is designed to improve the ease of design, development, deployment and management
of an EPP service, while maintaining compatibility with the existing EPP RFCs.
This section lists the main design criteria.</t>

<ul>
<li><t>Provide a clear, clean, easy to use and self-explanatory
interface that can easily be integrated into existing software
systems. On the basis of these principles a [REST] architectural
style was chosen, where a client interacts with a REPP server via HTTP.</t>
</li>
<li><t>Scalability, HTTP allows the use of well know mechanisms for creating scalable systems, such as
load balancing. Load balancing at the level of request messages is more efficient compared to load balancing based on TCP sessions.
When using EPP over TCP, the TCP session can be used to transmit multiple request messages and these are then all processed by a single
EPP server and not load balanced across a pool of available servers.</t>

<ul spacing="compact">
<li>Stateless, <xref target="RFC5734"></xref> requires a stateful session between a client and the<br />
EPP server. A REPP server MUST be stateless and MUST NOT keep client session or any other application state.
Every client request needs to provide all of the information necessary for the server to successfully process the request.</li>
</ul></li>
<li><t>Security, allow for the use of authentication and authorization solutions available
for HTTP based applications.</t>
</li>
<li><t>Content negotiation, A server may choose to include support for multiple media types.
The client must be able to signal the server what media type the should use for decoding request content en for encoding response content.
This document only describes the use of [XML] but the use of other media types such as JSON <xref target="RFC7159"></xref> should also be possible.</t>
</li>
<li><t>Compatibility with existing EPP RFCs.</t>
</li>
<li><t>Simplicity, when the semantics of a REPP resource URL and HTTP method match an EPP command and request message, the use of an request message should be optional.</t>
</li>
</ul>
</section>

<section anchor="epp-extension-framework"><name>EPP Extension Framework</name>
<t><xref target="RFC3735" sectionFormat="bare" section="Section 2"></xref> describes how the EPP extension framework can be used to extend
EPP functionality by adding new features at the protocol, object and command-response level.
This section describes the impact of REPP on each of the extension levels:</t>

<ul>
<li><t>Protocol Extension: REPP does not define any new high level protocol elements.
The <xref target="command-mapping"></xref> section describes an extension
resource for use with existing and future command extensions.</t>
</li>
<li><t>Object extension: REPP does not use the &quot;command&quot;
concept, because the &quot;command&quot; concept is part of a RPC style and
not of the REST style. A REST URL resource and HTTP method combination have
replaced the command concept. The <xref target="command-mapping"></xref> section describes a command extension
resource for each object type and can be used for existing and future command extensions.
REPP does not define any new object level extensions.
All existing and future object level EPP extensions can be used.</t>
</li>
<li><t>Command-Response extension:
RESTful EPP reuses the existing request and response messages defined in the EPP RFCs.</t>
</li>
</ul>
</section>

<section anchor="resource-naming-convention"><name>Resource Naming Convention</name>
<t>A REPP resource can be a single unique object identifier e.g. a domain
name, or consist out of a collection of objects.
A collection of objects available for registry operations MUST be identified by: <tt>/{context-root}/{version}/{collection}</tt></t>

<ul>
<li><t><tt>{context-root}</tt> is the base URL which MUST be specified by each
registry. The {context-root} MAY be an empty, zero length string.</t>
</li>
<li><t><tt>{version}</tt> is a path segment which identifies the interface version. This
is the equivalent of the Version element in the EPP RFCs. The version
used in a REPP URL MUST match the version used in EPP request and response messages.</t>
</li>
<li><t><tt>{collection}</tt> MUST be substituted by &quot;domains&quot;, &quot;hosts&quot; or
&quot;contacts&quot;, referring to either <xref target="RFC5731"></xref>, <xref target="RFC5732"></xref> or <xref target="RFC5733"></xref>.</t>
</li>
</ul>
<t>A trailing slash MAY be added to each request. Implementations
MUST consider requests which only differ with respect to this
trailing slash as identical.</t>
<t>A specific EPP object instance MUST be identified by {context-root}/
{version}/{collection}/{id} where {id} is a unique object identifier
described in EPP RFCs.</t>
<t>An example domain name resource, for domain name example.nl, would look like this:</t>
<t><tt>/repp/v1/domains/example.nl</tt></t>
<t>The path segment after a collection path segment MUST be used to identify an object
instance, the  path segment after an object instance MUST be used to identify
attributes of the object instance.</t>
<t>Reource URLs used by REPP may contain embedded object identifiers. By using a object identifier
in the resource URL, the object identifier in the request messages becomes superfluous.
However, since the goal of REPP is to maintain compatibility with existing EPP object mapping schemas, this redundancy is accepted as a trade off. Removing the object identifier from the request message would require new object mapping schemas.</t>
<t>The server MUST return HTTP status code 412 when the object
identifier (for example <eref target="domain:name">domain:name</eref>, <eref target="host:name">host:name</eref> or <eref target="contact:id">contact:id</eref>)
in the EPP request message does not match the {id} object identifier embedded in the URL.
  </t>
</section>

<section anchor="session-management"><name>Session Management</name>
<t>Session management as described in <xref target="RFC5730"></xref> requires a stateful server, maintaining client and application state. One of the main design considerations of REPP is to enable more scalable EPP services, for this the REPP server MUST use a stateless architecture. Session management functionality MUST be delegated to the HTTP layer.</t>
<t>The server MUST not create and maintain client sessions for use over multiple client requests and NOT
maintain any state information relating to the client or EPP process.</t>
<t>Due to stateless nature of REPP, a request must contain all information required for the
server to be able to successfully process the request. The client MUST include authentication credentials for each request. This MAY be done by using any of the available HTTP authentication mechanisms, such as those described in <xref target="RFC2617"></xref>.</t>
</section>

<section anchor="http-use"><name>HTTP Use</name>
<t>REPP uses the REST semantics, each HTTP method is assigned a distinct behaviour, section <xref target="http-method"></xref> provides a overview of each the behaviour assinged to each method. REPP requests are expressed by using a URL refering to a resource, an HTTP method, zero or more HTTP headers and a optional message body containing the EPP request message.</t>
<t>An REPP HTTP message body MUST contain at most a single EPP request or response. HTTP
requests MUST be processed independently of each other and in the
same order as received by the server.</t>
<t>When using an HTTP version where the TCP connection is not reused, the client MAY use the &quot;Connection&quot; header to request for the server not to close the existing connection, so it can be re-used for future requests. The server MAY choose not to honor this request.</t>

<section anchor="http-method"><name>Method Definition</name>
<t>REPP commands MUST be executed by using an HTTP method on a resource
identified by an URL. The server MUST support the following methods.</t>

<ul spacing="compact">
<li>GET: Request a representation of a object resource or a collection of resources</li>
<li>PUT: Update an existing object resource</li>
<li>POST: Create a new object resource</li>
<li>DELETE: Delete an existing object resource</li>
<li>HEAD: Check for the existence of an object resource</li>
<li>OPTIONS: Request a greeting</li>
</ul>
</section>

<section anchor="content-negotiation"><name>Content negotiation</name>
<t></t>
<t>The REPP server MAY choose to support multiple representations for EPP objects, such as XML and JSON.
When multiple representations are supported, the server MUST use agent-driven content negotiation and HTTP headers for content negotiation, as described in <xref target="RFC2616" sectionFormat="of" section="12.2"></xref>.</t>
<t>The client MUST use these HTTP headers:</t>

<ul spacing="compact">
<li><tt>Content-Type</tt>: Used to indicate the type of a request message body</li>
<li><tt>Accept</tt>: Used to indicate the type the server MUST use for the representation, this MAY
       be a list of types and related weight factors, as described in <xref target="RFC2616" sectionFormat="of" section="14.1"></xref></li>
</ul>
<t>The server MUST use the <tt>Content-Type</tt> HTTP header to indicate the type used for the representation in the response message body. The server MUST return HTTP status code 406 (Not Acceptable) when the client requests an unsupported representation type.</t>
</section>

<section anchor="epp-content"><name>EPP content</name>
<t>In contrast to EPP over TCP <xref target="RFC5734"></xref>, REPP does not always
require a EPP request message to be sent to the server. The information conveyed by HTTP method, URL and request headers is, for some use cases, sufficient for the server to be able to successfully proceses the request. The <tt>Object Info</tt> request for example, does not require an EPP message.</t>
<t>When an EPP request does require an EPP request message, the client MUST use the HTTP POST or PUT method and
add the EPP request message content to the HTTP message body.</t>
</section>

<section anchor="request"><name>Request</name>

<section anchor="headers"><name>Headers</name>
<t>HTTP request-headers are used to transmit additional or optional
request data to the server. All REPP HTTP headers must have
the &quot;REPP-&quot; prefix, following the recommendations from <xref target="RFC6648"></xref>.</t>

<ul>
<li><t><tt>REPP-cltrid</tt>:  The client transaction identifier is the equivalent
of the <tt>clTRID</tt> element defined in <xref target="RFC5730"></xref> and MUST be used
accordingly when the REPP request does not contain an EPP request in the
HTTP message body. When this header is present in a client request, an
equivalent element in the message body MAY also be present, but
MUST than be consistent with the header.</t>
</li>
<li><t><tt>REPP-svcs</tt>: The namespace used by the client in the EPP request message. The client MUST use this header
if the media type used by the client requires the server to know what namespaces are used.
Such as is the case for XML-based request messages.
The header value MAY contain multiple comma separated namespaces</t>
</li>
<li><t><tt>Accept-Language</tt>:  This header is equivalent to the &quot;lang&quot;
element in the EPP Login command. The server MUST support the use
of HTTP Accept-Language header by clients. The client MAY
issue a Hello request to discover the languages supported by the server.
Multiple servers in a load-balanced environment SHOULD reply with
consistent &quot;lang&quot; elements in the Greeting response.
The value of the Accept-Language header MUST match 1 of the languages from the Greeting.
When the server receives a request using an unsupported langauge, the server MUST respond using the default language configured for the server, as required in <xref target="RFC5730" sectionFormat="of" section="2.9.1.1"></xref>
</t>
</li>
<li><t><tt>Connection</tt>:  </t>
</li>
</ul>
</section>
</section>

<section anchor="response"><name>Response</name>
<t>The server response contains an HTTP status code, HTTP headers and it MAY contain an EPP response message in the HTTP message body.</t>

<section anchor="headers-1"><name>Headers</name>
<t>HTTP response-headers are used to transmit additional response data
to the client.  All HTTP headers used by REPP MUST use the &quot;REPP-&quot;
prefix.</t>

<ul>
<li><t><tt>REPP-svtrid</tt>:  This header is the equivalent of the &lt;svTRID&gt; element
defined in <xref target="RFC5730"></xref> and MUST be used accordingly when the REPP response
does not contain an EPP response in the  HTTP message body.
If an HTTP message body with the EPP XML equivalent &lt;svTRID&gt; exists, both values MUST
be consistent.</t>
</li>
<li><t><tt>REPP-cltrid</tt>:  This header is the equivalent of the &lt;clTRID&gt; element
in <xref target="RFC5730"></xref> and MUST be used accordingly. If an HTTP message
body with the EPP XML equivalent &lt;clTRID&gt; exists, both values MUST
be consistent.</t>
</li>
<li><t><tt>REPP-eppcode</tt>: This header is the equivalent of the result code defined
in <xref target="RFC5730"></xref> and MUST be used accordingly. This header MUST only
be used when an REPP response HTTP message body has no content.
</t>
</li>
<li><t><tt>REPP-check-avail</tt>: An alternative for the &quot;avail&quot;
attribute of the <eref target="object:name">object:name</eref> element in an Object Check response and
MUST be used accordingly. The server does not return a HTTP message body in response to a REPP Object Check request.</t>
</li>
<li><t><tt>REPP-check-reason</tt>: An optional alternative for the &quot;object:reason&quot;
element in an Object Check response and MUST be used accordingly.</t>
</li>
<li><t><tt>Cache-Control</tt>:  ...  TBD: the idea is to prohibit
caching.  Even though it will probably work and be useful in some
scenario's, it also complicates matters.
</t>
</li>
<li><t><tt>Connection</tt>:  .... </t>
</li>
</ul>
</section>
</section>

<section anchor="response-status-codes"><name>Response Status Codes</name>
<t>TODO:
see for example: <eref target="https://datatracker.ietf.org/doc/html/rfc7480">https://datatracker.ietf.org/doc/html/rfc7480</eref></t>
</section>

<section anchor="error-handling"><name>Error Handling</name>
<t>REPP is designed atop of the HTTP protocol, both are an
application layer protocol with their own status- and result codes.
The value of an EPP result code and HTTP status code MUST remain
independent of each other. E.g. an EPP message containing a result code indicating an
error in the EPP protocol layer, may be contained in the message body of a HTTP response using status code 200. An HTTP response using an error status code MAY not contain an EPP message body containing an EPP result code.</t>

<ul>
<li><t><tt>EPP result code</tt>: MUST only return EPP result information relating to
the EPP protocol.  The HTTP header &quot;REPP-eppcode&quot; MAY be used
to add EPP result information to the HTTP layer.</t>
</li>
<li><t><tt>HTTP status code</tt>:  MUST only return status information related to the
HTTP protocol, When there is a mismatch between the object
identifier in the HTTP message body and the resource URL HTTP
status code 412 MUST be returned.</t>
</li>
</ul>
</section>
</section>

<section anchor="command-mapping"><name>Command Mapping</name>
<t>EPP commands are mapped to RESTful EPP transaction consisting out of three elements.</t>

<ol spacing="compact">
<li>A resource defined by a URL.</li>
<li>The HTTP method to execute on the resource.</li>
<li>The EPP request message, contained in the HTTP message body.</li>
</ol>
<t>For some EPP transactions a request message is optional or not supported.</t>
<t><xref target="tbl-cmd-mapping"></xref> lists a mapping for each EPP command to REPP transaction, the subsequent sections
provide details for each request. Resource URLs in the table are assumed to be using the prefix: &quot;/{context-root}/{version}/&quot;.</t>

<ul>
<li><t><tt>{c}</tt>:  An abbreviation for {collection}: this MUST be substituted with
&quot;domains&quot;, &quot;hosts&quot;, &quot;contacts&quot; or any other collection of objects.</t>
</li>
<li><t><tt>{i}</tt>:  An abbreviation for an object id, this MUST be substituted with the value of a domain name, hostname, contact-id or a message-id or any other defined object.</t>
</li>
</ul>
<table anchor="tbl-cmd-mapping"><name>Mapping of EPP Command to REPP Request
</name>
<thead>
<tr>
<th>Command</th>
<th>Method</th>
<th>Resource</th>
<th>Request message</th>
</tr>
</thead>

<tbody>
<tr>
<td>Hello</td>
<td>OPTIONS</td>
<td>/</td>
<td>No</td>
</tr>

<tr>
<td>Login</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
</tr>

<tr>
<td>Logout</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
</tr>

<tr>
<td>Check</td>
<td>HEAD</td>
<td>/{c}/{i}</td>
<td>No</td>
</tr>

<tr>
<td>Info</td>
<td>GET/POST</td>
<td>/{c}/{i}</td>
<td>Optional</td>
</tr>

<tr>
<td>Poll Request</td>
<td>GET</td>
<td>/messages</td>
<td>No</td>
</tr>

<tr>
<td>Poll Ack</td>
<td>DELETE</td>
<td>/messages/{i}</td>
<td>No</td>
</tr>

<tr>
<td>Create</td>
<td>POST</td>
<td>/{c}</td>
<td>Yes</td>
</tr>

<tr>
<td>Delete</td>
<td>DELETE</td>
<td>/{c}/{i}</td>
<td>No</td>
</tr>

<tr>
<td>Renew</td>
<td>PUT</td>
<td>/{c}/{i}/period</td>
<td>Yes</td>
</tr>

<tr>
<td>Transfer</td>
<td>POST</td>
<td>/{c}/{i}/transfers</td>
<td>Optional</td>
</tr>

<tr>
<td>Transfer Query</td>
<td>GET/POST</td>
<td>/{c}/{i}/transfers/latest</td>
<td>Optional</td>
</tr>

<tr>
<td>Transfer Cancel</td>
<td>DELETE</td>
<td>/{c}/{i}/transfers/latest</td>
<td>Optional</td>
</tr>

<tr>
<td>Transfer Approve</td>
<td>PUT</td>
<td>/{c}/{i}/transfers/latest</td>
<td>Optional</td>
</tr>

<tr>
<td>Transfer Reject</td>
<td>DELETE</td>
<td>/{c}/{i}/transfers/latest</td>
<td>Optional</td>
</tr>

<tr>
<td>Update</td>
<td>PUT</td>
<td>/{c}/{i}</td>
<td>Yes</td>
</tr>

<tr>
<td>Extension [1]</td>
<td>*</td>
<td>/{c}/{i}/extension/*</td>
<td>*</td>
</tr>

<tr>
<td>Extension [2]</td>
<td>*</td>
<td>/extension/*</td>
<td>*</td>
</tr>
</tbody>
</table><t>[1] This mapping is used for Object extensions based on the extension mechanism as defined in [RFC5730, secion 2.7.2]</t>
<t>[2] This mapping is used for protocol extensions based on the extension mechanism as defined in [RFC5730, secion 2.7.1]</t>

<section anchor="hello"><name>Hello</name>

<ul spacing="compact">
<li>Request: OPTIONS /{context-root}/{version}</li>
<li>Request payload: No</li>
<li>Response payload: Greeting response</li>
</ul>
<t>The server MUST return a Greeting response, as defined in <xref target="RFC5730" sectionFormat="of" section="2.4"></xref> in response
to request using the HTTP OPTIONS method on the root &quot;/&quot; resource.</t>
<t>The EPP version used in the Hello response MUST match the version value used for the <tt>{version}</tt> path segment of the URL used for the Hello request.</t>
<t>Example Hello request:</t>

<artwork><![CDATA[C: OPTIONS /repp/v1/ HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: Connection: keep-alive

]]>
</artwork>
<t>Example Hello response:</t>

<artwork><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Length: 799
S: Content-Type: application/epp+xml
S:
S: <?xml version="1.0" encoding="UTF-8" standalone="no"?>
S: <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:   <greeting>
S:      <svcMenu>
S:         <version>1.0</version>
S:         <!-- The rest of the response is omitted here -->
S:      <svcMenu>
S:   </greeting>
S: </epp>
]]>
</artwork>
</section>

<section anchor="login"><name>Login</name>
<t>The Login command defined in <xref target="RFC5730"></xref> is used to configure a session and is part of the stateful nature of the EPP protocol. A REPP server is stateless and MUST not maintain any client state and MUST NOT support the Login command. The client MUST include all the information in a REPP request that is required for the server to be able to properly process the request, this includes the request attributes that are part of the Login command defined in <xref target="RFC5730" sectionFormat="of" section="2.9.1.1"></xref>.</t>
<t>
The request attributes from the <xref target="RFC5730"></xref> Login command are are moved to the HTTP layer.</t>

<ul spacing="compact">
<li><tt>clID</tt>: Replaced by HTTP authentication</li>
<li><tt>pw:</tt>: Replaced by HTTP authentication</li>
<li><tt>newPW</tt>: Replaced by HTTP authentication</li>
<li><tt>version</tt>: Replaced by the <tt>{version}</tt> path segment in the request URL.</li>
<li><tt>lang</tt>: Replaced by the <tt>Accept-Language</tt> HTTP header.</li>
<li><tt>svcs</tt>: Replaced by the <tt>REPP-svcs</tt> HTTP header.</li>
</ul>
<t>The server MUST check the namespaces used in the REPP-svcs HTTP header. An unsupported namespace MUST result in the appropriate EPP result code.</t>
</section>

<section anchor="logout"><name>Logout</name>
<t>The concept of a session no longer exists when using REPP, therefore the Logout command MUST not be implemented by the server.</t>
</section>

<section anchor="query"><name>Query</name>
<t>
Sending content using an HTTP GET request is discouraged in <xref target="RFC9110"></xref>, there exists no generally defined semanticsfor content received in a GET request.</t>
<t>A REPP client MAY use the HTTP GET method for executing a query command only when no request data has to be added to the HTTP message body. When an EPP object requires additional authInfo information, as described in [RFC5731] and [RFC5733], the client MUST use the HTTP POST method and add the query command content to the HTTP message body.</t>

<section anchor="check"><name>Check</name>

<ul>
<li><t>Request: HEAD /{collection}/{id}</t>
</li>
<li><t>Request payload: N/A</t>
</li>
<li><t>Response payload: N/A</t>
</li>
</ul>
<t>The server MUST support the HTTP HEAD method for the Check command, the client and the server MUST not add any content to the HTTP message body. The response MUST contain the REPP-check-avail and MAY contain the REPP-check-reason header. The value of the REPP-check-avail header MUST be &quot;1&quot; or &quot;0&quot; as described in the EPP RFCs, depending on whether the object can be provisioned or not.</t>
<t>A Check request using the HTTP HEAD method is limited to checking only a single resource {id}. This may seem a step backwards when compared to the Check command defined in the EPP RFCs where multiple object-ids are allowed inside a Check command. The RESTful Check command can be load balanced more efficiently when the request contains only a single resource {id} that needs to be checked.</t>
<t>&lt;!-- do we also need GET method for check? this old text described addign GET method
  but we already use this for Info command, so need other resource for check?</t>
<t>the server MAY also support the HTTP GET method. If the HTTP HEAD method is used, the client and the server MUST not add any content to the HTTP message body. If the HTTP GET method is used the client and the server MUST add the Check content to the message body.
The HTTP response for a request using the HTTP GET method, MUST contain the REPP-check-avail and MAY contain the REPP-check-reason header. The value of  REPP-check-avail header MUST be &quot;1&quot; or &quot;0&quot; as described in the EPP RFCs, depending on whether the object can be provisioned or not.</t>
<t>A Check request using the HTTP HEAD method is limited to checking only a single resource {id}. This may seem a step backwards when compared to the Check command defined in the EPP RFCs where multiple object-ids are allowed inside a Check command. The RESTful Check command can be load balanced more efficiently when the request contains only a single resource {id} that needs to be checked. When the HTTP GET method is used, the EPP request in the message body MUST also be limited to a single object to check. The server MUST return EPP result code 2002, when the Check request contains more than 1 object to check.</t>
<t>Request with a request message:</t>

<ul>
<li><t>Request: GET /{collection}/{id}</t>
</li>
<li><t>Request payload: Check request</t>
</li>
<li><t>Response payload: Check Response
--&gt;</t>
</li>
</ul>
<t>Example Check request for a domain name:</t>

<artwork><![CDATA[C: HEAD /repp/v1/domains/example.nl HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0

]]>
</artwork>
<t>Example Check response:</t>

<artwork><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Length: 0
S: REPP-cltrid: ABC-12345
S: REPP-svtrid: XYZ-12345
S: REPP-check-avail: 0
S: REPP-check-reason: In use
S: REPP-result-code: 1000
]]>
</artwork>
</section>

<section anchor="info"><name>Info</name>
<t>An Info request MUST be performed using the HTTP GET or POST method on
a resource identifying an object instance. The response MUST be a
response message as described in object mapping of the EPP RFCs.</t>
<t>An object MAY have authorization attachted to it, forcing the client to include
the authorization in the request. When the authorization needs to be included in the request
the HTTP POST method MUST be used.</t>
<t>A request for an object without authorization information.</t>

<ul>
<li><t>Request: GET /{collection}/{id}</t>
</li>
<li><t>Request payload: N/A</t>
</li>
<li><t>Response payload: Info response</t>
</li>
</ul>
<t>A request for an object that has authorization information attached.</t>

<ul>
<li><t>Request: POST /{collection}/{id}</t>
</li>
<li><t>Request payload: Info request</t>
</li>
<li><t>Response payload: Info response</t>
</li>
</ul>

<section anchor="domain-name"><name>Domain Name</name>
<t>A domain name Info request is different from a contact- and host Info request in the
sense that EPP Domain Name Mapping <xref target="RFC5731"></xref>, Section 3.1.2 describes
an OPTIONAL &quot;hosts&quot; attribute. This attribute is mapped to a nested resource of the domains collection.</t>
<t>The specified default value is &quot;all&quot;. This default is mapped to a
shortcut, the resource object instance URL without any additional
labels.</t>

<ul>
<li><t>default: GET /domains/{id}</t>
</li>
<li><t>Hosts=all: GET /domains/{id}/hosts/all</t>
</li>
<li><t>Hosts=del: GET /domains/{id}/hosts/del</t>
</li>
<li><t>Hosts=sub: GET /domains/{id}/hosts/sub</t>
</li>
<li><t>Hosts=none: GET /domains/{id}/hosts/none</t>
</li>
</ul>
<t>Example domain Info including all hosts, without authorization data:</t>

<artwork><![CDATA[C: GET /repp/v1/domains/example.nl/hosts/all HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0

]]>
</artwork>
<t>Example Info response:</t>

<artwork><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Length: 424
S: Content-Type: application/epp+xml

S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <domain:infData xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:         <!-- The rest of the response is omitted here -->
S:      </domain:infData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</artwork>
</section>
</section>

<section anchor="poll"><name>Poll</name>

<section anchor="poll-request"><name>Poll Request</name>

<ul>
<li><t>Request: GET /messages</t>
</li>
<li><t>Request payload: N/A</t>
</li>
<li><t>Response payload: Poll response</t>
</li>
</ul>
<t>A client MUST use the HTTP GET method on the messages collection to
request the message at the head of the queue.</t>
<t>Example Poll request:</t>

<artwork><![CDATA[C: GET /repp/v1/messages HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345

]]>
</artwork>
<t>Example Poll response:</t>

<artwork><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Length: 312
S: Content-Type: application/epp+xml

S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1301">
S:      <msg>Command completed successfully; ack to dequeue</msg>
S:    </result>
S:    <msgQ count="5" id="12345">
S:      <qDate>2000-06-08T22:00:00.0Z</qDate>
S:      <msg>Transfer requested.</msg>
S:    </msgQ>
S:    <resData>
S:       <!-- The rest of the response is omitted here -->
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</artwork>
</section>

<section anchor="poll-ack"><name>Poll Ack</name>

<ul>
<li><t>Request: DELETE /messages/{id}</t>
</li>
<li><t>Request payload: N/A</t>
</li>
<li><t>Response payload: Poll ack response</t>
</li>
</ul>
<t>A client MUST use the HTTP DELETE method on a message instance to acknowledge the removal of the message from the message queue.</t>
<t>Example Poll Ack request:</t>

<artwork><![CDATA[C: GET /repp/v1/messages/12345 HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345

]]>
</artwork>
<t>Example Poll Ack response:</t>

<artwork><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Length: 312
S: Content-Type: application/epp+xml

S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <msgQ count="4" id="12345"/>
S:    <trID>
S:      <clTRID>ABC-12346</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</artwork>
</section>
</section>

<section anchor="transfer-query"><name>Transfer Query</name>
<t>The Transfer Query request uses the special &quot;latest&quot; resource to refer to the
latest active object transfer.</t>

<ul>
<li><t>Request: GET {collection}/{id}/transfers/latest</t>
</li>
<li><t>Request payload: N/A</t>
</li>
<li><t>Response payload: Transfer respons.</t>
</li>
</ul>
<t>If the requested object has no associated authorization information then the HTTP GET method
MAY be used, otherwise the HTTP POST method MUST be used.</t>

<ul>
<li><t>Request: POST {collection}/{id}/transfers/latest</t>
</li>
<li><t>Request payload: Transfer Query request</t>
</li>
<li><t>Response payload: Transfer Query response.</t>
</li>
</ul>
<t>Example domain name Transfer Query request:</t>

<sourcecode type="xml"><![CDATA[C: GET /repp/v1/domains/example.nl/transfers/latest HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0

]]>
</sourcecode>
<t>Example Transfer Query response:</t>

<sourcecode type="xml"><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Length: 230
S: Content-Type: application/epp+xml
S:
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <!-- The rest of the response is omitted here -->
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</sourcecode>
</section>
</section>

<section anchor="transform"><name>Transform</name>

<section anchor="create"><name>Create</name>

<ul spacing="compact">
<li>Request: POST /{collection}</li>
<li>Request payload: Object Create request</li>
<li>Response payload: Object Create response</li>
<li>HTTP response code: 201</li>
</ul>
<t>A client MUST create a new object using the HTTP POST method on an object collection resource.</t>
<t>Example Domain Create request:</t>

<sourcecode type="xml"><![CDATA[C: POST /repp/v1/domains/ HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Content-Type: application/epp+xml
C: Accept-Language: en
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0
C: Content-Length: 220
C:
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <create>
C:      <domain:create
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example.nl</domain:name>
C:        <!-- The rest of the request is omitted here -->
C:      </domain:create>
C:    </create>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>
]]>
</sourcecode>
<t>Example Domain Create response:</t>

<artwork><![CDATA[S: HTTP/2 201 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 642
S: Content-Type: application/epp+xml
S:
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:   <response>
S:      <result code="1000">
S:         <msg>Command completed successfully</msg>
S:      </result>
S:      <resData>
S:         <domain:creData
S:            <!-- The rest of the response is omitted here -->
S:         </domain:creData>
S:      </resData>
S:      <trID>
S:         <clTRID>ABC-12345</clTRID>
S:         <svTRID>54321-XYZ</svTRID>
S:      </trID>
S:   </response>
S:</epp>
]]>
</artwork>
</section>

<section anchor="delete"><name>Delete</name>

<ul>
<li><t>Request: DELETE /{collection}/{id}</t>
</li>
<li><t>Request payload: N/A</t>
</li>
<li><t>Response payload: Object Delete response</t>
</li>
</ul>
<t>Deleting an object from the registry database MUST be performed using
the HTTP DELETE method on a REST resource identifying a unique
object instance.</t>
<t>Example Domain Delete request:</t>

<artwork><![CDATA[C: DELETE /repp/v1/domains/example.nl HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345

]]>
</artwork>
<t>Example Domain Delete response:</t>

<artwork><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 505
S: Content-Type: application/epp+xml

S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0"
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:   <response>
S:      <result code="1000">
S:         <msg>Command completed successfully</msg>
S:      </result>
S:      <trID>
S:         <clTRID>ABC-12345</clTRID>
S:         <svTRID>XYZ-12345</svTRID>
S:       </trID>
S:   </response>
S:</epp>
]]>
</artwork>
</section>

<section anchor="renew"><name>Renew</name>

<ul>
<li><t>Request: PUT /{collection}/{id}/period</t>
</li>
<li><t>Request payload: Object &lt;renew&gt;.</t>
</li>
<li><t>Response payload: Object &lt;renew&gt; response.</t>
</li>
</ul>
<t>Renewing an object is only specified by <xref target="RFC5731"></xref>, the &lt;renew&gt;
command has been mapped to a period resource.</t>
<t>Example Renew request:</t>

<sourcecode type="xml"><![CDATA[C: POST /repp/v1/domains/example.nl/period HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Content-Type: application/epp+xml
C: Accept-Language: en
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0
C: Content-Length: 325
C: 
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <renew>
C:      <domain:renew
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example.nl</domain:name>
C:        <domain:curExpDate>2023-11-17</domain:curExpDate>
C:        <domain:period unit="y">1</domain:period>
C:      </domain:renew>
C:    </renew>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>
]]>
</sourcecode>
<t>Example Renew response:</t>

<sourcecode type="xml"><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 505
S: Content-Type: application/epp+xml
S:
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <!-- The rest of the response is omitted here -->
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</sourcecode>
</section>

<section anchor="transfer"><name>Transfer</name>
<t>Transferring an object from one sponsoring client to another is only
specified in <xref target="RFC5731"></xref> and <xref target="RFC5733"></xref>.  The &lt;transfer&gt; command has
been mapped to a transfer resource.</t>
<t>The semantics of the HTTP DELETE method are determined by the role of
the client executing the method. For the current sponsoring
registrar the DELETE method is defined as &quot;reject transfer&quot;. For the
new sponsoring registrar the DELETE method is defined as &quot;cancel
transfer&quot;.</t>

<section anchor="create-1"><name>Create</name>

<ul>
<li><t>Request: POST /{collection}/{id}/transfers</t>
</li>
<li><t>Request payload: Optional Transfer Approve request</t>
</li>
<li><t>Response Payload: Transfer response.</t>
</li>
</ul>
<t>To start a new object transfer, the client MUST use the HTTP POST method on a unique domain name or
contact object instance. If the server only requires the domain name to be able to create a new transfer, then<br />
the client MAY choose to send an empty HTTP message body. <xref target="RFC5730" sectionFormat="of" section="3.2.4"></xref> described additional
information the server might require.</t>
<t>Example Create request using no object authorization:</t>

<artwork><![CDATA[C: POST /repp/v1/domains/example.nl/transfers HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Content-Type: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0

]]>
</artwork>
<t>Example Create request using object authorization:</t>

<sourcecode type="xml"><![CDATA[C: POST /repp/v1/domains/example.nl/transfers HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0
C: Content-Length: 252

C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <transfer op="request">
C:      <domain:transfer
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example.nl</domain:name>
C:        <domain:authInfo>
C:          <domain:pw roid="DOM-12345">kds78jhbfdsk</domain:pw>
C:        </domain:authInfo>
C:      </domain:transfer>
C:    </transfer>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>
]]>
</sourcecode>
<t>Example Transfer response:</t>

<sourcecode type="xml"><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 328
S: Content-Type: application/epp+xml
S:
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1001">
S:      <msg>Command completed successfully; action pending</msg>
S:    </result>
S:    <resData>
S:      <!-- The rest of the response is omitted here -->
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</sourcecode>
</section>

<section anchor="cancel"><name>Cancel</name>

<ul>
<li><t>Request: DELETE /{collection}/{id}/transfers/latest</t>
</li>
<li><t>Request payload: Optional Transfer Reject request</t>
</li>
<li><t>Response payload: Transfer cancel response message.</t>
</li>
</ul>
<t>The new sponsoring client MUST use the HTTP DELETE method to cancel a
requested transfer.</t>
<t>Example Cancel request:</t>

<artwork><![CDATA[C: DELETE /repp/v1/domains/example.nl/transfers/latest HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0

]]>
</artwork>
</section>

<section anchor="reject"><name>Reject</name>

<ul>
<li><t>Request: DELETE /{collection}/{id}/transfers/latest</t>
</li>
<li><t>Request payload:  Optional Transfer Reject request</t>
</li>
<li><t>Response payload: Transfer response</t>
</li>
</ul>
<t>The current sponsoring client MUST use the HTTP DELETE method to
reject a transfer requested by the new sponsoring client.</t>
<t>Example Reject request:</t>

<artwork><![CDATA[C: DELETE /repp/v1/domains/example.nl/transfers/latest HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0

]]>
</artwork>
</section>

<section anchor="approve"><name>Approve</name>

<ul>
<li><t>Request: PUT /{collection}/{id}/transfers/latest</t>
</li>
<li><t>Request payload: Optional Transfer Approve request</t>
</li>
<li><t>Response payload: Transfer response.</t>
</li>
</ul>
<t>The current sponsoring client MUST use the HTTP PUT method to approve
a transfer requested by the new sponsoring client.</t>
<t>Example Approve request:</t>

<artwork><![CDATA[C: PUT /repp/v1/domains/example.nl/transfers/latest HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-cltrid: ABC-12345
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0

]]>
</artwork>
</section>
</section>

<section anchor="update"><name>Update</name>

<ul>
<li><t>Request: PUT /{collection}/{id}</t>
</li>
<li><t>Request payload: Object:update.</t>
</li>
<li><t>Response payload: Update response message</t>
</li>
</ul>
<t>An object Update request MUST be performed with the HTTP PUT method
on a unique object resource. The payload MUST contain an Update request as described in the EPP RFCs.</t>
<t>Example Update request:</t>

<sourcecode type="xml"><![CDATA[C: POST /repp/v1/domains/example.nl/transfers HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Content-Type: application/epp+xml
C: Accept-Language: en
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0
C: Content-Length: 252

C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <update>
C:      <domain:update
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example.nl</domain:name>
C:           <!-- The rest of the response is omitted here -->
C:      </domain:update>
C:    </update>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>
]]>
</sourcecode>
<t>Example Update response:</t>

<sourcecode type="xml"><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 328
S: Content-Type: application/epp+xml

S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</sourcecode>
</section>
</section>

<section anchor="extensions"><name>Extensions</name>

<ul>
<li><t>Request: * /extensions/*</t>
</li>
<li><t>Request payload: *</t>
</li>
<li><t>Response payload: *</t>
</li>
</ul>
<t>EPP protocol extensions, as defined in <xref target="RFC5730" sectionFormat="bare" section="secion 2.7.3"></xref> are supported using the generic &quot;/extensions&quot; resource.
The HTTP method used for a extension is not defined but must follow the RESTful principles.</t>
<t>Example Extension request:
The example below, shows the use of the &quot;Domain Cancel Delete&quot; command as defined as a custom command in <xref target="SIDN-EXT"></xref> by the .nl domain registry operator. Where the registrar can use the HTPP DELETE method on a domain name resource to cancel an active domain delete transaction and move the domain from the quarantine state back to the active state.</t>

<sourcecode type="xml"><![CDATA[C: DELETE /repp/v1/extensions/domains/example.nl/quarantine HTTP/2
C: Host: repp.example.nl
C: Cache-Control: no-cache
C: Authorization: Bearer <token>
C: Accept: application/epp+xml
C: Accept-Language: en
C: REPP-svcs: urn:ietf:params:xml:ns:domain-1.0
C: REPP-cltrid: ABC-12345

]]>
</sourcecode>
<t>Example Extension response:</t>

<sourcecode type="xml"><![CDATA[S: HTTP/2 200 OK
S: Date: Fri, 17 Nov 2023 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 328
S: Content-Type: application/epp+xml

S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>XYZ-12345</svTRID>
S:    </trID>
S:  </response>
S:</epp>
]]>
</sourcecode>
</section>
</section>

<section anchor="transport-considerations"><name>Transport Considerations</name>
<t></t>
<t><xref target="RFC5730" sectionFormat="of" section="2.1"></xref> of the EPP protocol specification
describes considerations to be addressed by a protocol transport
mapping. This section addresses each of the considerations using a
combination of REPP features and features provided by HTTP as follows:</t>

<ul>
<li><t>When using load balancing to distribute requests over multiple stateless REPP servers
the return order of the results cannot be guaranteed. Therefore the client is responsible
for sending results in the correct order, and may have to wait
for a server response for a previous request, if a request depends on the
response of a previous request.</t>
</li>
<li><t>Sessions are delegated to the HTTP layer, which uses the client-server paradigm.
HTTP is an application layer protocol which uses TCP as a
transport protocol. TCP includes features to provide reliability,
flow control, ordered delivery, and congestion control
<xref target="RFC793" sectionFormat="of" section="1.5"></xref> describes these features in detail; congestion
control principles are described further in <xref target="RFC2581"></xref> and <xref target="RFC2914"></xref>.
HTTP is a stateless protocol and as such it does not maintain any
client state.</t>
</li>
<li><t>The stateful nature of EPP is no longer preserved through EPP managed
sessions. Session management is delegated to the stateless HTTP layer.
EPP session related information, such as authentication credentials
MUST be included in every HTTP request. This is required
for the server to be able to process the request successfully.</t>
</li>
<li><t>HTTP 1.1 allows persistent connections which can be used to send
multiple HTTP requests to the server using the same connection.</t>
</li>
<li><t>The server MAY allow pipelining, <xref target="RFC9000"></xref> descibes a mechanism for
multiplexing multiple request streams.</t>
</li>
<li><t>Batch-oriented processing (combining multiple EPP commands in a
single HTTP request) MUST NOT be permitted. To maximize scalability
every request MUST contain oly a single command.</t>
</li>
<li><t>A request processing failure has no influence on the processing of
other requests. The stateless nature of the server allows a
client to retry a failed request by re-sending the request.</t>
</li>
<li><t>Due to the stateless nature of a REPP service, errors while processing a EPP command or
other errors are isolated to a single request. The Error  status MUST be communicated to the
client using the appropriate HTTP status codes.</t>
</li>
</ul>
</section>

<section anchor="iana-considerations"><name>IANA Considerations</name>
<t>TODO: any?</t>
</section>

<section anchor="internationalization-considerations"><name>Internationalization Considerations</name>
<t>TODO: any?
Accept-Language in HTTP Header</t>
</section>

<section anchor="security-considerations"><name>Security Considerations</name>
<t></t>
<t><xref target="RFC5730"></xref> describes a Login command for transmitting client
credentials. This command MUST NOT be used for REPP. Due to
the stateless nature of REPP, the client MUST include the authentication credentials
in each HTTP request. The validation of the user credentials must be
performed by an out-of-band mechanism. Examples of authentication mechanisms are Basic
and Digest access authentication <xref target="RFC2617"></xref> or OAuth <xref target="RFC5849"></xref>.</t>
<t>To protect data confidentiality and integrity, all data transport between the client
and server MUST use TLS <xref target="RFC5246"></xref>. <xref target="RFC5734" sectionFormat="bare" section="Section 9"></xref> describes the level of security
that is REQUIRED.</t>
<t>EPP does not use XML encryption for protecting messages. Furthermore,
REPP (HTTP) servers are vulnerable to common denial-of-service
attacks. Therefore, the security considerations of <xref target="RFC5734"></xref> also
apply to REPP.</t>
<t></t>
</section>

<section anchor="obsolete-epp-result-codes"><name>Obsolete EPP Result Codes</name>
<t>The following result codes specified in <xref target="RFC5730"></xref> are no longer
meaningful in RESTful EPP and MUST NOT be used.</t>
<table><name>Obsolete EPP result codes
</name>
<thead>
<tr>
<th>Code</th>
<th>Reason</th>
</tr>
</thead>

<tbody>
<tr>
<td>1500</td>
<td>The logout command is not used anymore.</td>
</tr>

<tr>
<td>2100</td>
<td>The REPP URL already includes the version.</td>
</tr>

<tr>
<td>2002</td>
<td>Commands can now be sent in any order. TODO: is order guaranteed?</td>
</tr>

<tr>
<td>2200</td>
<td>The login command is not used anymore.</td>
</tr>
</tbody>
</table></section>

<section anchor="acknowledgments"><name>Acknowledgments</name>
<t>TODO</t>
</section>

</middle>

<back>
<references><name>References</name>
<references><name>Normative References</name>
<reference anchor="REST" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">
  <front>
    <title>Architectural Styles and the Design of Network-based Software Architectures</title>
    <author fullname="Roy Fielding" initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <date year="2000"></date>
  </front>
</reference>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1738.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2581.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2914.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3735.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5730.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5731.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5732.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5733.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5734.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6648.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.793.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9000.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9110.xml"/>
</references>
<references><name>Informative References</name>
<reference anchor="SIDN-EXT" target="http://rxsd.domain-registry.nl/sidn-ext-epp-1.0.xsd">
  <front>
    <title>Extensible Provisioning Protocol v1.0 schema .NL extensions</title>
    <author>
      <organization>SIDN</organization>
    </author>
    <date year="2019"></date>
  </front>
</reference>
</references>
</references>

</back>

</rfc>
